# This is a test scenario comparing regular local caching with incremental
# local caching wrt local modifications. The scenario simulates a developer
# making a change to their already cached working copy, and rebuilding it.
# 
# You need to have your build producing build scans to a Gradle Enterprise
# instance in order to run this test.
# 
# How to run the test:
# 
# 1) Start by making a copy of this file next to the project you want to test
# incremental caching with.
# 
# 2) Place scans-init.gradle next to your scenario file. This will configure
# build scans to be published to GE in a way that the performance tester tool
# can recognize.
# 
# 3) Place local-cache-init.gradle next to your scenario file, too. This will
# configure the local cache to use the default location, and disable the remote
# cache.
# 
# 4) Then choose a change in your project's Git history. This can be a single
# commit or multiple ones. The change should not be trivial (like editing a
# comment in a source file), but it should also affect only part of the project.
# In general, the change should represent a typical modification a developer
# would make in the project durign their everyday work.
# 
# Pick the last commit before the change as your <BASE_COMMIT>, and the first
# commit with the change as your <CHANGED_COMMIT>, and fill in their hashes
# below.
# 
# 5) Then pick a typical task, like "assembleDebug" in case of an Android
# application, and fill it in for <TASKS>. Again, this should represent
# something a developer would want to run during a regular Wednesday.
# 
# It might also be a good idea to try the whole process first with "help",
# and only change it to "assembleDebug" (or what have you) once you see
# useful data coming in.
# 
# 6) Build and install Gradle Profiler on the PATH, for instructions see:
# https://github.com/gradle/gradle-profiler#gradle-profiler. Make sure you
# use the lastest version from the master branch.
# 
# 7) Now let's run the scenrio with:
#
# $ gradle-profiler --profile buildscan --project-dir <PROJECT_DIR> \
#     --warmups 5 --iterations 5 --scenario-file incremental-caching.scenario \
#     --gradle-version <LOCATION_OF_GRADLE_DISTRIBUTION>
# 
# 8) Open the "Cache performance tester" app from
# https://gradle.github.io/cache-performance-tester/
# 
# You can start listening to build scans as they are generated by the
# profiler directly, or you can paste the profiler output and hit "Process".

defaults = {
    git-checkout = {
        # Specify the hash of the commit before the change
        cleanup = "<BASE_COMMIT>"
        # Specify the hash of the last commit of the change
        build = "<CHANGED_COMMIT>"
    }
    # Specify the tasks to run
    cleanup-tasks = ["clean", "<TASKS>"]
    tasks = ["<TASKS>"]
}

default-scenarios = [
    "load-merkle",
    "load-regular",
    "store-merkle",
    "store-regular",
    "without-cache",
]

base-gradle-args = ${?defaults.gradle-args} [
    "--scan",
    "--init-script", "scans-init.gradle",
    "--init-script", "local-cache-init.gradle"
]

cached-regular = ${defaults} {
    gradle-args = ${base-gradle-args} ["--build-cache"]
    show-build-cache-size = true
}

cached-merkle = ${defaults} {
    gradle-args = ${base-gradle-args} ["--build-cache", "-Dorg.gradle.caching.version2=true"]
    show-build-cache-size = true
}

load-regular = ${cached-regular} {
    clear-build-cache-before = SCENARIO
}

load-merkle = ${cached-merkle} {
    clear-build-cache-before = SCENARIO
}

store-regular = ${cached-regular} {
    clear-build-cache-before = CLEANUP
}

store-merkle = ${cached-merkle} {
    clear-build-cache-before = CLEANUP
}

without-cache = ${defaults} {
	gradle-args = ${base-gradle-args} ["--no-build-cache"]
}
