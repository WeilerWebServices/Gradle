FILE: typeParameters.kt
    <out T : Any> public? final? interface List {
        public? final? operator fun get(index: Int): T

        public? final? infix fun concat(other: List<T>): List<T>

    }
    public? final typealias StringList = List<out String>
    public? final typealias AnyList = List<*>
    <out T : Any> public? abstract class AbstractList : List<T>, kotlin/Any {
        public? constructor(): super<kotlin/Any>()

    }
    public? final? class SomeList : AbstractList<Int> {
        public? constructor(): super<AbstractList<Int>>()

        public? open? override fun get(index: Int): Int {
            ^get Int(42)
        }

        public? open? override fun concat(other: List<Int>): List<Int> {
            ^concat this#
        }

    }
