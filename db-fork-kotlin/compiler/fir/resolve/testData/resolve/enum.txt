FILE: enum.kt
    public abstract interface Some {
    }
    public final object O1 : R|Some|, R|kotlin/Any| {
        public constructor(): super<R|kotlin/Any|>()

    }
    public final object O2 : R|Some|, R|kotlin/Any| {
        public constructor(): super<R|kotlin/Any|>()

    }
    public final enum class SomeEnum : R|kotlin/Enum| {
        private constructor(x: R|Some|): super<R|kotlin/Enum|>()

        public final val x: R|Some|
            public get(): R|Some|

        public final enum entry FIRST : R|SomeEnum| {
            public constructor(): super<R|SomeEnum|>(<Unresolved name: O1>#)

            public final override fun check(y: R|Some|): R|kotlin/Boolean| {
                ^check Boolean(true)
            }

        }

        public final enum entry SECOND : R|SomeEnum| {
            public constructor(): super<R|SomeEnum|>(<Unresolved name: O2>#)

            public final override fun check(y: R|Some|): R|kotlin/Boolean| {
                ^check ==(R|<local>/y|, <Unresolved name: O2>#)
            }

        }

        public abstract fun check(y: R|Some|): R|kotlin/Boolean|

    }
