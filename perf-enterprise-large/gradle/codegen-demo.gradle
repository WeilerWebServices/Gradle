if(project.hasProperty('codegenDemo')) {
    if(project.hasProperty('retainTimestamps')) {
        apply from: "$rootDir/gradle/timestamp-retainer.gradle"
    }

    allprojects { project ->
        // add generated source directory to main sourceset
        sourceSets {
            main {
                java {
                    srcDir project.file('src/generated/java')
                }
            }
        }
        
        idea {
            module {
                // workaround to add src/generated/java and src/main/java as source folders
                sourceDirs = [project.file('src/generated/java'), project.file('src/main/java')]
            }
        }

        task codegen {
            outputs.dir(project.file('src/generated/java'))
            outputs.cacheIf { true }
            doLast {
               10.times { pkgIdx ->
                  def pkg = "pkg$pkgIdx"
                  50.times {
                      def src = project.file("src/generated/java/$pkg/Foo${it}.java")
                      src.parentFile.mkdirs()
                      src.text = """package $pkg;
                    
        public class Foo$it {

           ${(0..10).collect { "   public int x$it;"}.join('\n') }

           }"""
                  }
               }
            }
            if(project.hasProperty('retainTimestamps')) {
                doFirst(retainTimestamps())
                int retainTimestampsPercentage = 100
                def retainTimestampsPercentageString = project.property('retainTimestamps')
                if(retainTimestampsPercentageString) {
                    retainTimestampsPercentage = retainTimestampsPercentageString as Integer
                }
                doLast(restoreTimestamps(retainTimestampsPercentage))
            }
        }

        tasks.idea.dependsOn codegen
    }
}