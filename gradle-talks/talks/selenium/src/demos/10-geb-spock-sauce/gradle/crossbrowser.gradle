import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit

class SauceAccount {
    String username = "gebish"
    String accessKey = "4d767d16-b109-4cf7-a2d1-f5dd175a0ed6"
}

class SauceConnect {
    final protected Project project
    final protected SauceAccount account
    final protected Logger logger

    protected Process tunnelProcess

    SauceConnect(Project project, SauceAccount account, Logger logger) {
        this.project = project
        this.account = account
        this.logger = logger
    }

    void startTunnel(File sauceConnectJar, File workingDir, boolean background) {
        if (!account.username || !account.accessKey) {
            throw new InvalidUserDataException("No sauce labs username or passwords set")
        }

        def jvm = org.gradle.internal.jvm.Jvm.current()
        def javaBinary = jvm.javaExecutable.absolutePath

        if (background) {

            workingDir.mkdirs()
            tunnelProcess = new ProcessBuilder(javaBinary, "-jar", sauceConnectJar.absolutePath, account.username, account.accessKey).
                    redirectErrorStream(true).
                    directory(workingDir).
                    start()

            def latch = new CountDownLatch(1)
            Thread.start {
                try {
                    tunnelProcess.inputStream.eachLine { String line ->
                        if (latch.count) {
                            logger.info "sauce-connect: $line"
                            if (line.endsWith("Connected! You may start your tests.")) {
                                latch.countDown()
                            }
                        } else {
                            logger.debug "sauce-connect: $line"
                        }
                    }
                } catch (IOException ignore) {}
            }

            if (!latch.await(3, TimeUnit.MINUTES)) {
                throw new RuntimeException("Timeout waiting for sauce tunnel to open (run with ")
            }

            addShutdownHook {
                stopTunnel()
            }
        } else {
            project.exec {
                executable javaBinary
                args "-jar", sauceConnectJar.absolutePath, account.username, account.accessKey
            }
        }
    }

    void stopTunnel() {
        if (tunnelProcess) {
            logger.info "disconnecting sauce labs tunnel"
            tunnelProcess.destroy()
        }
    }
}

class BrowserSpec {
    String name

    String browser
    String platform
    String version

    BrowserSpec(String name) {
        this.name = name
        String browserSpec = name
        if (browserSpec) {
            String[] split = browserSpec.split("_", 3)
            browser = split[0]
            platform = split.size() > 1 ? split[1] : ""
            version = split.size() > 2 ? split[2] : ""
        }
    }

    String getDisplayName() {
        "$browser${platform?.capitalize() ?: ""}${version?.capitalize() ?: ""}"
    }

    void configure(Test test) {
        test.systemProperty "browser", "$browser:$platform:$version"
    }
}

class CrossBrowser {
    SauceAccount sauceAccount
    NamedDomainObjectContainer<BrowserSpec> browsers
    Task openSauceTunnel
    Task closeSauceTunnel

    CrossBrowser(SauceAccount sauceAccount, NamedDomainObjectContainer<BrowserSpec> browsers, Task openSauceTunnel, Task closeSauceTunnel) {
        this.sauceAccount = sauceAccount
        this.browsers = browsers
        this.openSauceTunnel = openSauceTunnel
        this.closeSauceTunnel = closeSauceTunnel
    }

    void enable(Test test) {
        Project project = test.project
        def crossBrowserTask = project.task("allCrossBrowserTests") {
            group "cross Browser Test"
        }

        browsers.all { BrowserSpec browser ->
            def testTask = project.task("${browser.displayName}Test", type: Test) { task ->
                ext.crossBrowser = true
                group crossBrowserTask.group
                dependsOn openSauceTunnel
                finalizedBy closeSauceTunnel, "${browser.displayName}DecorateResults"
                crossBrowserTask.dependsOn task

                testClassesDir = test.testClassesDir
                testSrcDirs = test.testSrcDirs
                classpath = test.classpath

                systemProperty 'geb.build.reportsDir', project.reporting.file("$name-geb")

                browser.configure(task)
            }

            project.task("${browser.displayName}DecorateResults", type: Copy) { task ->
                    from testTask.reports.junitXml.destination
                    into "$testTask.reports.junitXml.destination-decorated"
                    filter { it.replaceAll("(testsuite|testcase) name=\"(.+?)\"", "\$1 name=\"\$2 ($browser.displayName)\"") }
            }
        }
    }
}

repositories {
    maven { url "http://repository-saucelabs.forge.cloudbees.com/release" }
}

configurations {
    sauceConnect
}

dependencies {
    sauceConnect "com.saucelabs:sauce-connect:3.0.28"
}

extensions.create("sauceAccount", SauceAccount)
extensions.create("sauceConnect", SauceConnect, project, sauceAccount, logger)

task openSauceTunnelInBackground << {
    sauceConnect.startTunnel(configurations.sauceConnect.singleFile, buildDir, true)
}

task closeSauceTunnel << {
    sauceConnect.stopTunnel()
}

task openSauceTunnel << {
    sauceConnect.startTunnel(configurations.sauceConnect.singleFile, buildDir, false)
}

extensions.browsers = container(BrowserSpec)
extensions.create("crossBrowser", CrossBrowser, sauceAccount, browsers, openSauceTunnelInBackground, closeSauceTunnel)

