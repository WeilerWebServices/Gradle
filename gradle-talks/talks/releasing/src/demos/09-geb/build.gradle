apply plugin: 'idea'
apply from: "gradle/idea.gradle"

allprojects { project ->
	version = '0.8.0-SNAPSHOT'
	group = 'org.codehaus.geb'
	
	ext {
		isSnapshot = version.endsWith("-SNAPSHOT")

		grailsVersion = "2.0.2"
		seleniumVersion = "2.15.0"
		groovyVersion = "1.7.10"
		spockVersion = "0.6-groovy-1.7"

		spockDependency = "org.spockframework:spock-core:$spockVersion"

		seleniumDependency = "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
		seleniumSupportDependency = "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
		firefoxDriverDependency = "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
		htmlUnitDriverDependency = "org.seleniumhq.selenium:selenium-htmlunit-driver:$seleniumVersion"

		jettyDependency = "org.mortbay.jetty:jetty:6.1.21"

		groovyDependency = "org.codehaus.groovy:groovy-all:$groovyVersion"

		repositories {
			mavenCentral()
			mavenRepo name: "java.net", url: "http://download.java.net/maven/2"
		}

		groovyModules = [
			":module:geb-core", ":module:geb-core-tests", ":module:test-support",
			":module:geb-spock", ":module:geb-junit3", ":module:geb-junit4",
			":module:geb-easyb", ":module:geb-testng", ":module:geb-implicit-assertions"
		]

		publishedModules = [
			":module:geb-core", ":module:geb-implicit-assertions", ":module:geb-spock",
			":module:geb-junit3", ":module:geb-junit4", ":module:geb-easyb",
			":module:geb-testng", ":doc:manual"
		]

		publishedGroovyModules = groovyModules.findAll { it in publishedModules }

		grailsPluginModule = ":module:geb-grails"
	}
}

subprojects {
	if (path in groovyModules) {
		apply plugin: "groovy"
		apply plugin: 'idea'

		if (path != ":test-support") {
			apply from: "file:${rootDir}/clover.gradle"
		}

		dependencies {
			groovy groovyDependency
		}

		sourceCompatibility = 1.5
		targetCompatibility = 1.5

		ext.driver = project.hasProperty("driver") ? driver : "htmlunit"
		test {
			systemProperties['geb.driver'] = driver
			maxParallelForks Math.max(2, (int) (Runtime.runtime.availableProcessors() / 2))
		}
	}

	if (path in publishedGroovyModules) {
		groovydoc {
			exclude "**/internal/**"

			link "http://download.oracle.com/javase/6/docs/api/",
				"java.net",
				"java.util",
				"java.lang",
				"java.io"

			link "http://selenium.googlecode.com/svn/trunk/docs/api/java/",
				"org.openqa.selenium"

			link "http://groovy.codehaus.org/api/",
				"groovy.lang"

			link "http://www.gebish.org/manual/$version/api/geb-core",
				"geb"

			docTitle = "Groovy API Documentation for $name $version"
			footer = "<p style='text-align: center'>Groovy API Documentation for $name $version - Licensed under the Apache License, Version 2.0 - <a href='http://www.gebish.org'>http://www.gebish.org</a></p>"
			windowTitle = "Groovy API for $name $version"
		}

		task sourcesJar(type: Jar) {
			classifier 'sources'
			from sourceSets.main.allSource
		}

		task javadocJar(type: Jar) {
			classifier 'javadoc'
			from groovydoc
		}

		artifacts {
			archives javadocJar, sourcesJar
		}
	}

	if (path in publishedModules) {
		apply plugin: "base"
		apply plugin: "maven"
		apply plugin: "signing"

		signing {
			sign configurations.archives
			required { !isSnapshot && gradle.taskGraph.hasTask(uploadArchives) }
		}
		
		task release(dependsOn: uploadArchives)

		apply from: "$rootDir/gradle/pom.gradle"
		
		if (path == ":doc:manual") {
			task("install", type: Upload, dependsOn: configurations.archives.allArtifacts.buildDependencies) {
				configuration = configurations.archives
				description = "Does a maven install of the archives artifacts into the local .m2 cache."
				repositories {
					mavenInstaller name: "mavenInstaller"
				}
			}
		}
		
		ext.poms = [project.install.repositories.mavenInstaller.pom]

		uploadArchives { task ->
			project.poms << repositories.mavenDeployer {
				beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
				uniqueVersion = false
				gradle.taskGraph.whenReady { taskGraph ->
					if (taskGraph.hasTask(task)) {
						repository(url: "https://nexus.codehaus.org/service/local/staging/deploy/maven2/") {
							authentication(userName: codehausUsername, password: codehausPassword)
						}
						snapshotRepository(url: "https://nexus.codehaus.org/content/repositories/snapshots/") {
							authentication(userName: codehausUsername, password: codehausPassword)
						}
					}
				}
			}.pom
		}
		
		project.poms*.whenConfigured { applyPomMods(it) }
	}
}

task wrapper(type: Wrapper) {
	gradleVersion "1.0-rc-3"
}

