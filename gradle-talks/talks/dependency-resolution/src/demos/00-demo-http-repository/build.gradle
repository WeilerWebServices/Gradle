import org.eclipse.jetty.server.Handler
import org.eclipse.jetty.server.Request;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.server.handler.DefaultHandler;
import org.eclipse.jetty.server.handler.HandlerList;
import org.eclipse.jetty.server.handler.ResourceHandler;

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.eclipse.jetty:jetty-server:8.1.7.v20120910"
    }
}

File repoBase = project.file("${project.projectDir.parent}/repo")

apply plugin: 'ivy-publish'
apply plugin: 'maven-publish'
apply plugin: 'java'

group = "com.gradlesummit"
version = "1.0"

publishing {
    repositories {
        ivy { url "$repoBase/ivy" }
        maven { url "$repoBase/maven" }
    }
    publications {
        // Ivy Publications
        ivy(IvyPublication) {
            from components.java
        }
        ivy12(IvyPublication) {
            from components.java
            revision "1.2"
        }
//        ivy13(IvyPublication) {
//            from components.java
//            revision "1.3"
//        }

        // Maven Publications
        maven(MavenPublication) {
            from components.java
        }
        maven11(MavenPublication) {
            from components.java
            version "1.1"
        }
    }
}

clean.doLast {
    repoBase.eachDir {
        project.delete(it)
    }
}

task serve << {
    repoBase.mkdirs()

    Server server = new Server(8090);
    ResourceHandler resource_handler = new TestResourceHandler(repoBase);
    resource_handler.setDirectoriesListed(true);
    server.setHandler(resource_handler);
    server.start();

    println "Serving $repoBase"
    server.join();
}

class TestResourceHandler extends ResourceHandler {

    File baseDir

    public TestResourceHandler(File baseDir) {
        this.baseDir = baseDir
        setResourceBase(baseDir.absolutePath)
    }

    @Override
    void handle(String target, Request baseRequest, javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws IOException, javax.servlet.ServletException {
        super.handle(target, baseRequest, request, response)
        if (!target.endsWith('jetty-dir.css')) {
            println "${request.method} $target"
            final targetFile = new File(baseDir, target)
            def message = targetFile.exists() ? "OK" : "NOT FOUND"
            println "   >>> $message"
        }
    }
}
