import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

import java.nio.charset.Charset
import java.util.concurrent.TimeUnit

/**
 * This Gradle script captures the <i>Git diff</i> in a GitHub gist and references the gist via a custom link.
 */

def buildScanApi = project.extensions.findByName('buildScan')
if (!buildScanApi) {
    return
}

buildScan.background {
    publishGist()
}

void publishGist() {
    def isCapturingScan = !gradle.startParameter.offline && !gradle.startParameter.continuous
    if (!isCapturingScan) {
        gradle.rootProject.logger.warn("Build is offline or continuous. Will not publish gist.")
        return
    }

    def hasGistCredentials = gradle.rootProject.hasProperty('gistToken')
    if (!hasGistCredentials) {
        gradle.rootProject.logger.warn("User has not set 'gistToken'. Cannot publish gist.")
        return
    }

    def diff = execAndGetStdout('git', 'diff')
    if (diff) {
        try {
            def baseUrl = new URL('https://api.github.com/gists')
            def credentials = "${gradle.rootProject.findProperty('gistToken')}"
            def basicAuth = "Basic ${credentials.bytes.encodeBase64()}"

            HttpURLConnection connection = (HttpURLConnection) baseUrl.openConnection()
            connection.with {
                setRequestProperty('Authorization', basicAuth)
                doOutput = true
                requestMethod = 'POST'
                outputStream.withWriter { writer ->
                    jsonRequest(writer, gradle.rootProject, diff)
                }
                createLink(content, buildScan)
            }
            gradle.rootProject.logger.info('Successfully published gist.')
        } catch (ex) {
            gradle.rootProject.logger.warn('Unable to publish gist', ex)
        }
    }
}

// This must be static! Else Gradle will interpret `files` as Project.files() and this won't work.
def jsonRequest(Writer out, Project project, String diff) {
    def builder = new JsonBuilder()
    builder {
        description "Git diff for $project.name"
        'public' false
        files {
            "${project.name}.diff" {
                content diff
            }
        }
    }
    builder.writeTo(out)
}

def createLink(def content, def buildScan) {
    def parser = new JsonSlurper()
    def url = parser.parse(content.text.bytes).html_url
    buildScan.link('Git diff', url)
}

String execAndGetStdout(String... args) {
    Process process = args.toList().execute()
    try {
        def standardText = process.getInputStream().getText(Charset.defaultCharset().name())
        def ignore = process.getErrorStream().getText(Charset.defaultCharset().name())

        def finished = process.waitFor(10, TimeUnit.SECONDS);
        finished && process.exitValue() == 0 ? trimAtEnd(standardText) : null;
    } finally {
        process.destroyForcibly()
    }
}

String trimAtEnd(String str) {
    ('x' + str).trim().substring(1)
}
