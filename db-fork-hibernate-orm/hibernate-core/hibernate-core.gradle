/*
 * Hibernate, Relational Persistence for Idiomatic Java
 *
 * License: GNU Lesser General Public License (LGPL), version 2.1 or later.
 * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
 */
import org.apache.tools.ant.filters.ReplaceTokens

apply from: rootProject.file( 'gradle/published-java-module.gradle' )
apply plugin: 'antlr'
apply plugin: 'hibernate-matrix-testing'
apply plugin: 'org.hibernate.build.gradle.xjc'

description = 'Hibernate\'s core ORM functionality'

configurations {
    tests {
        description = 'Configuration for the produced test jar'
    }
}

dependencies {

    compile( libraries.jpa )
    // Javassist is no longer the default enhancer but still required for other purposes, e.g. Scanning
    compile( libraries.javassist )
    // Could be made optional?
    compile( libraries.byteBuddy )
    compile( libraries.antlr )
    compile( libraries.jta )
    compile( libraries.jandex )
    compile( libraries.classmate )
    compile( libraries.activation )

    // We need dom4j for a number of things temporarily:
    //      1) (unsupported) EntityMode.DOM4J support
    //      2) Envers
    //      3) hibernate-commons-annotations
    compile( libraries.dom4j )
    compile( libraries.commons_annotations )
    antlr( libraries.antlr )

    // JAXB
    compile( libraries.jaxb_api )
    compile( libraries.jaxb_runtime )
    xjc( libraries.jaxb_runtime )
    xjc( libraries.jaxb_xjc )
    xjc( libraries.jaxb2_basics )
    xjc( libraries.jaxb2_basics_ant )
    xjc( libraries.activation )

    provided( libraries.jacc )
    provided( libraries.validation )
    provided( libraries.ant )
    provided( libraries.cdi )

    testCompile( project(':hibernate-testing') )
    testCompile( libraries.shrinkwrap_api )
    testCompile( libraries.shrinkwrap )
    testCompile( libraries.jacc )
    testCompile( libraries.validation )
    testCompile( libraries.jandex )
    testCompile( libraries.classmate )
    testCompile( libraries.mockito )
    testCompile( libraries.mockito_inline )
    testCompile( libraries.jodaTime )

    testCompile( libraries.cdi ) {
        // we need to force it to make sure we influence the one coming from arquillian
        force=true
    }

    testCompile( libraries.validator ) {
        // for test runtime
        transitive = true
    }

    // for testing stored procedure support
    testCompile( libraries.derby )

    testRuntime( "org.jboss.spec.javax.ejb:jboss-ejb-api_3.2_spec:1.0.0.Final" )
    testRuntime( libraries.expression_language )
    testRuntime( 'jaxen:jaxen:1.1' )
    testRuntime( libraries.javassist )
    testRuntime( libraries.byteBuddy )
    testRuntime( libraries.weld )
    testRuntime( libraries.atomikos )
    testRuntime( libraries.atomikos_jta )
    testRuntime(libraries.wildfly_transaction_client)

    testAnnotationProcessor( project( ':hibernate-jpamodelgen' ) )

    testCompile libraries.arquillian_junit_container
    testCompile libraries.arquillian_protocol_servlet
    testCompile libraries.shrinkwrap_descriptors_api_javaee
    testCompile libraries.shrinkwrap_descriptors_impl_javaee
    testCompile libraries.wildfly_arquillian_container_managed

    testCompile libraries.jboss_ejb_spec_jar
    testCompile libraries.jboss_annotation_spec_jar
}

jar {
    manifest {
        mainAttributes( 'Main-Class': 'org.hibernate.Version' )

        instructionFirst 'Import-Package',
            'javax.security.auth;resolution:=optional',
            'javax.security.jacc;resolution:=optional',
            'javax.validation;resolution:=optional',
            'javax.validation.constraints;resolution:=optional',
            'javax.validation.groups;resolution:=optional',
            'javax.validation.metadata;resolution:=optional',
            // TODO: Shouldn't have to explicitly list this, but the plugin
            // generates it with a [1.0,2) version.
            "javax.persistence;version=\"${project.jpaVersion.osgiName}\"",
            // optionals
            'javax.management;resolution:=optional',
            'javax.naming.event;resolution:=optional',
            'javax.naming.spi;resolution:=optional',
            'org.apache.tools.ant;resolution:=optional',
            'org.apache.tools.ant.taskdefs;resolution:=optional',
            'org.apache.tools.ant.types;resolution:=optional',
            '!javax.enterprise*',
            'javax.enterprise.context.spi;resolution:=optional',
            'javax.enterprise.inject.spi;resolution:=optional',
            'javax.inject;resolution:=optional',
            'net.bytebuddy.*;resolution:=optional',
            // We must specify the version explicitly to allow Karaf
            // to use an older version of JAXB (the only one we can use in Karaf)
            "javax.xml.bind.*;version=\"${project.jaxbApiVersionOsgiRange}\""

//        // TODO: Uncomment once EntityManagerFactoryBuilderImpl no longer
//        // uses ClassLoaderServiceImpl.
//        instruction 'Export-Package',
//            'org.hibernate.boot.registry.classloading.internal',
//            '*'
    }
}

ext {
	jaxbTargetDir = file( "${buildDir}/generated-src/jaxb/main" )
}

sourceSets.main {
    java.srcDir project.jaxbTargetDir
}

// resources inherently exclude sources
sourceSets.test.resources {
    setSrcDirs( ['src/test/java','src/test/resources'] )
}

//idea {
//	module {
//		sourceDirs += file( "${buildDir}/generated-src/antlr/main" )
//	}
//}

xjc {
    outputDir = project.jaxbTargetDir

    schemas {
        cfg {
            xsd = file( 'src/main/resources/org/hibernate/xsd/cfg/legacy-configuration-4.0.xsd' )
            xjcBinding = file( 'src/main/xjb/hbm-configuration-bindings.xjb' )
        }
        hbm {
            xsd = file( 'src/main/resources/org/hibernate/xsd/mapping/legacy-mapping-4.0.xsd' )
            xjcBinding = file( 'src/main/xjb/hbm-mapping-bindings.xjb' )
            xjcExtensions = ['inheritance', 'simplify']
        }
    }
}


//sourceSets.main.sourceGeneratorsTask.dependsOn xjc
//sourceSets.main.sourceGeneratorsTask.dependsOn generateGrammarSource
tasks.compile.dependsOn generateGrammarSource

task copyBundleResources (type: Copy) {
    ext {
        bundlesTargetDir = file( "${buildDir}/bundles" )
        bundleTokens = dbBundle[db]
        ext.bundleTokens['buildDirName'] = buildDir.absolutePath
    }

    from file('src/test/bundles')
    into ext.bundlesTargetDir
    filter( ReplaceTokens, tokens: ext.bundleTokens)

    doFirst {
        ext.bundlesTargetDir.mkdirs()
    }
}
processTestResources.dependsOn copyBundleResources

task testJar(type: Jar, dependsOn: testClasses) {
    classifier = 'test'
    from sourceSets.test.output
}

artifacts {
    tests testJar
}

processTestResources {
    doLast {
        copy {
            from file( 'src/test/resources' )
            into file( "${buildDir}/resources/test" )
            include 'arquillian.xml'
            include 'org/hibernate/test/wf/ddl/manifest.mf'
            expand wildFlyInstallDir: project( ':hibernate-orm-modules' ).wildFlyInstallDir,
                   hibernateMajorMinorVersion: "${project.ormVersion.family}",
                   arquillianDeploymentExportDir: "${rootProject.buildDir.absolutePath}/arquillian-deployments"
        }
    }
}

test.dependsOn ':hibernate-orm-modules:prepareWildFlyForTests'

test {
    systemProperty 'file.encoding', 'utf-8'
    beforeTest { descriptor ->
        //println "Starting test: " + descriptor
    }
}
