import org.gradle.nativeplatform.toolchain.internal.PreCompiledHeader

plugins {
    id "cpp-application"
    id "xcode"
}

def generatePrefixHeaderFileTask = tasks.register("generatePrefixHeaderFile", PrefixHeaderFileGenerateTask) {
    header = "pch.h"
    prefixHeaderFile = new File(temporaryDir, "prefix-header.h")
}

File findPchFile(Directory objectFileDir) {
    def pchFiles = objectFileDir.asFileTree.matching { it.include("**/*.gch", "**/*.pch") }
    assert pchFiles.size() == 1, "too many precompiled headers, run ./gradlew clean"
    return pchFiles.iterator().next()
}

application {
    binaries.whenElementFinalized { binary ->
        def pchTask = project.tasks.register("precompileHeader" + binary.name.capitalize(), CppPreCompiledHeaderCompile) {
            targetPlatform = binary.compileTask.get().targetPlatform
            toolChain = binary.toolChain
            objectFileDir = layout.buildDirectory.dir("pch/${binary.name}").get().asFile
            optimized = binary.optimized
            includes.from binary.compileTask.get().includes
            systemIncludes.from binary.compileTask.get().systemIncludes

            // TODO: /Zi and /ZI requires the intermediate PDB to be shared between compilation task (precompiled and compilation)
            if (binary.targetMachine.operatingSystemFamily.windows) {
                debuggable = false
                if (binary.debuggable) {
                    compilerArgs.add("/Z7")
                }
            }

            // TODO: Change to flatMap and remove dependsOn when prefixHeaderFile is converted to RegularFileProperty
            dependsOn generatePrefixHeaderFileTask
            source.from generatePrefixHeaderFileTask.map { it.prefixHeaderFile }

        }

        binary.compileTask.get().configure {
            dependsOn pchTask

            // TODO: /Zi and /ZI requires the intermediate PDB to be shared between compilation task (precompiled and compilation)
            if (binary.targetMachine.operatingSystemFamily.windows) {
                debuggable = false
                if (binary.debuggable) {
                    compilerArgs.add("/Z7")
                }
            }

            compilerArgs.addAll toolChain.map {
                if (it instanceof Clang) {
                    return ['-include', generatePrefixHeaderFileTask.get().prefixHeaderFile.absolutePath, '-include-pch', findPchFile(pchTask.get().objectFileDir.get()).absolutePath]
                } else if (it instanceof Gcc) {
                    return ['-include', generatePrefixHeaderFileTask.get().prefixHeaderFile.absolutePath, '-I', findPchFile(pchTask.get().objectFileDir.get()).parentFile.absolutePath]
                } else if (it instanceof VisualCpp) {
                    return ["/FI${generatePrefixHeaderFileTask.get().prefixHeaderFile.absolutePath}", "/Yu${generatePrefixHeaderFileTask.get().prefixHeaderFile.absolutePath}", "/Fp${findPchFile(pchTask.get().objectFileDir.get()).absolutePath}"]

                }
                logger.warning("The tool chain type is not supported for precompiled header support.")
                return []
            }
        }

        if (binary.toolChain instanceof VisualCpp) {
            binary.linkTask.get().configure {
                source.from pchTask.map { it.objectFileDir.get().asFileTree.matching { it.include "**/*.obj" } }
            }
        }
    }
}
